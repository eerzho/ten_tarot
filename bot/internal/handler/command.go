package handler

import (
	"bot/internal/def"
	"bot/internal/model"
	"context"
	"log/slog"

	"gopkg.in/telebot.v3"
)

type command struct {
	lg           *slog.Logger
	userSrv      userSrv
	tgCommandSrv tgCommandSrv
}

func newCommand(
	bot *telebot.Bot,
	lg *slog.Logger,
	userSrv userSrv,
	tgCommandSrv tgCommandSrv,
) *command {
	c := &command{
		lg:           lg,
		userSrv:      userSrv,
		tgCommandSrv: tgCommandSrv,
	}

	bot.Handle(def.TGStartCommand, c.start)
	bot.Handle(def.TGDonateCommand, c.donate)
	bot.Handle(def.TGSupportCommand, c.support)
	bot.Handle(def.TGCancelCommand, c.cancel)

	c.setCommands(bot)

	return c
}

func (cmd *command) setCommands(bot *telebot.Bot) {
	const op = "handler.command.setCommands"
	cmd.lg.Debug(op)

	if err := bot.SetCommands(cmd.tgCommandSrv.GetCommands(context.Background())); err != nil {
		cmd.lg.Error(op, slog.String("error", err.Error()))
	}
}

func (cmd *command) start(c telebot.Context) error {
	const op = "handler.command.start"
	cmd.lg.Debug(op, slog.Any("RID", c.Get(RID)))

	return c.Send(
		"–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –¢–∞—Ä–æ–ª–æ–≥ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã. " +
			"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è —Å–¥–µ–ª–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –¢–∞—Ä–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å.\n\n" +
			"‚ú®–ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –≤–∞—Å —Å—É–¥—å–±–∞‚ú®",
	)
}

func (cmd *command) donate(c telebot.Context) error {
	const op = "handler.command.donate"
	cmd.lg.Debug(op, slog.Any("RID", c.Get(RID)))
	ctx := c.Get("ctx").(context.Context)
	user := c.Get("user").(*model.User)

	if err := cmd.userSrv.UpdateState(ctx, user, def.UserDonateState); err != nil {
		cmd.lg.Error(op, slog.String("error", err.Error()))
		return c.Send("‚ú®–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ‚ú®")
	}

	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–Ω–∞—Ç–∞ –≤ ‚≠êÔ∏è")
}

func (cmd *command) support(c telebot.Context) error {
	const op = "handler.command.support"
	cmd.lg.Debug(op, slog.Any("RID", c.Get(RID)))
	ctx := c.Get("ctx").(context.Context)
	user := c.Get("user").(*model.User)

	if err := cmd.userSrv.UpdateState(ctx, user, def.UserSupportState); err != nil {
		cmd.lg.Error(op, slog.String("error", err.Error()))
		return c.Send("‚ú®–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ‚ú®")
	}

	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å ü§ï")
}

func (cmd *command) cancel(c telebot.Context) error {
	const op = "handler.command.cancel"
	cmd.lg.Debug(op, slog.Any("RID", c.Get(RID)))
	ctx := c.Get("ctx").(context.Context)
	user := c.Get("user").(*model.User)

	if err := cmd.userSrv.UpdateState(ctx, user, def.UserDefaultState); err != nil {
		cmd.lg.Error(op, slog.String("error", err.Error()))
		return c.Send("‚ú®–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ‚ú®")
	}

	return c.Send("–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç—É ü§ó")
}
