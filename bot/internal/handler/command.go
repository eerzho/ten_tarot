package handler

import (
	"bot/internal/constant"
	"bot/internal/failure"
	"bot/internal/model"
	"context"
	"gopkg.in/telebot.v3"
	"log/slog"
)

type (
	command struct {
		lg            *slog.Logger
		tgUserService tgUserService
	}
)

func newCommand(bot *telebot.Bot, lg *slog.Logger, tgUserService tgUserService) *command {
	c := &command{
		lg:            lg,
		tgUserService: tgUserService,
	}

	bot.Handle("/start", c.start)
	bot.Handle("/donate", c.donate)
	bot.Handle("/support", c.support)
	bot.Handle("/cancel", c.cancel)

	commands := []telebot.Command{
		{Text: "/donate", Description: "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"},
		{Text: "/support", Description: "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"},
		{Text: "/cancel", Description: "–û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É"},
	}

	if err := bot.SetCommands(commands); err != nil {
		lg.Error("handler.command", slog.String("error", err.Error()))
	}

	return c
}

func (cmd *command) start(c telebot.Context) error {
	const op = "handler.command.start"
	cmd.lg.Debug(op, slog.Any("RID", c.Get(RID)))

	return c.Send(
		"–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –¢–∞—Ä–æ–ª–æ–≥ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã. " +
			"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è —Å–¥–µ–ª–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –¢–∞—Ä–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å.\n\n" +
			"‚ú®–ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –≤–∞—Å —Å—É–¥—å–±–∞‚ú®",
	)
}

func (cmd *command) donate(c telebot.Context) error {
	const op = "handler.command.donate"
	cmd.lg.Debug(op, slog.Any("RID", c.Get(RID)))
	ctx := context.Background()

	errTGMsg := "‚ú®–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ‚ú®"

	user, ok := c.Get("user").(*model.TGUser)
	if !ok {
		cmd.lg.Error(op, slog.String("error", failure.ErrContextData.Error()))
		return c.Send(errTGMsg)
	}

	if err := cmd.tgUserService.UpdateState(ctx, user, constant.UserDonateState); err != nil {
		cmd.lg.Error(op, slog.String("error", err.Error()))
		return c.Send(errTGMsg)
	}

	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–Ω–∞—Ç–∞ –≤ ‚≠êÔ∏è")
}

func (cmd *command) support(c telebot.Context) error {
	const op = "handler.command.support"
	cmd.lg.Debug(op, slog.Any("RID", c.Get(RID)))
	ctx := context.Background()

	errTGMsg := "‚ú®–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ‚ú®"

	user, ok := c.Get("user").(*model.TGUser)
	if !ok {
		cmd.lg.Error(op, slog.String("error", failure.ErrContextData.Error()))
		return c.Send(errTGMsg)
	}

	if err := cmd.tgUserService.UpdateState(ctx, user, constant.UserSupportState); err != nil {
		cmd.lg.Error(op, slog.String("error", err.Error()))
		return c.Send(errTGMsg)
	}

	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å ü§ï")
}

func (cmd *command) cancel(c telebot.Context) error {
	const op = "handler.command.cancel"
	cmd.lg.Debug(op, slog.Any("RID", c.Get(RID)))
	ctx := context.Background()

	errTGMsg := "‚ú®–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ‚ú®"

	user, ok := c.Get("user").(*model.TGUser)
	if !ok {
		cmd.lg.Error(op, slog.String("error", failure.ErrContextData.Error()))
		return c.Send(errTGMsg)
	}

	if err := cmd.tgUserService.UpdateState(ctx, user, constant.UserDefaultState); err != nil {
		cmd.lg.Error(op, slog.String("error", err.Error()))
		return c.Send(errTGMsg)
	}

	return c.Send("–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç—É ü§ó")
}
